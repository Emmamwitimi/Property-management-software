// Import the necessary functions from the "@tanstack/react-table" library
// `useReactTable` is the main hook to create a table instance
// `flexRender` helps with rendering table cell content dynamically based on column definitions
// `getCoreRowModel` is used to generate the core row model for table rows
import {
  useReactTable,
  flexRender,
  getCoreRowModel,
} from "@tanstack/react-table";

// Define a `DataTable` component, which takes `columns` and `data` as props
export function DataTable({ columns, data }) {
  // Use the `useReactTable` hook to create a table instance with the provided data and column definitions
  // This instance will handle row models, header groups, and other table functions
  const table = useReactTable({
    data, // Array of data objects that will populate each row in the table
    columns, // Array of column definitions that specify headers and how to display each cell
    getCoreRowModel: getCoreRowModel(), // Generates row and cell structures from the data, allowing core table functionalities
  });

  // Return the complete table layout using JSX
  return (
    <div className="rounded-md border">
      {/* Create a table element with some utility classes for styling */}
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          {/* Map over header groups to dynamically generate header rows */}
          {table.getHeaderGroups().map((headerGroup) => (
            <tr key={headerGroup.id}>
              {/* Map over headers in each group to create individual table headers */}
              {headerGroup.headers.map((header) => (
                <th
                  key={header.id}
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  {/* Use `flexRender` to render the header content specified in `columnDef.header` */}
                  {flexRender(
                    header.column.columnDef.header, // Header content defined in columns
                    header.getContext() // Context with data about the column and row
                  )}
                </th>
              ))}
            </tr>
          ))}
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {/* Map over rows generated by `getRowModel` to create table rows */}
          {table.getRowModel().rows.map((row) => (
            <tr key={row.id}>
              {/* Map over visible cells in each row to generate table cells */}
              {row.getVisibleCells().map((cell) => (
                <td
                  key={cell.id}
                  className="px-6 py-4 whitespace-nowrap text-sm text-gray-500"
                >
                  {/* Use `flexRender` to display cell content specified in `columnDef.cell` */}
                  {flexRender(cell.column.columnDef.cell, cell.getContext())}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>

      {/* Add pagination controls below the table */}
      <div className="flex items-center justify-between px-4 py-3 bg-white border-t">
        {/* Only show pagination buttons on smaller screens (hidden on larger screens) */}
        <div className="flex justify-between flex-1 sm:hidden">
          <button
            onClick={() => table.previousPage()} // Navigate to the previous page when clicked
            disabled={!table.getCanPreviousPage()} // Disable if there is no previous page
            className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
          >
            Previous
          </button>
          <button
            onClick={() => table.nextPage()} // Navigate to the next page when clicked
            disabled={!table.getCanNextPage()} // Disable if there is no next page
            className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
          >
            Next
          </button>
        </div>
      </div>
    </div>
  );
}
